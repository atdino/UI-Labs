#!/usr/bin/python

import argparse
from queue import PriorityQueue
from queue import Queue

def configure_parser_and_get_args():
    parser = argparse.ArgumentParser(description='Laboratorijska vježba 1, UUUI, Ajdin Trejić')
    parser.add_argument('--alg', metavar='algorithm', required=True, type=str, help='algorithm type: bfs, ucs or astar')
    parser.add_argument('--ss', metavar='path', type=str, required=True, help='path')
    parser.add_argument('--h', metavar='path', type=str, help='heuristic path')
    parser.add_argument('--check-optimistic', action='store_true')
    parser.add_argument('--check-consistent', action='store_true')
    return parser.parse_args()


def print_result(alg_name, found_solution , states_visited, total_cost, path):
    print('# ' + alg_name)
    if found_solution:
        print('[FOUND_SOLUTION]: yes')
    else:
        print('[FOUND_SOLUTION]: no')
    print('[STATES_VISITED]: ' + str(states_visited))
    print('[PATH_LENGTH]: ' + str(len(path)))
    print('[TOTAL_COST]: ' + str(total_cost))
    print('[PATH]: ', end='')
    for i in range(len(path)-1):
        print(path[i] + " => ", end='')
    print(path[-1])


#this function load a files lines in a arr
def load_file_lines(file_path):
    file_lines = []
    with open(file_path) as f:
        for line in f:
            line = line.rstrip()
            if line[0:1] != '#':
                file_lines.append(line)
    return file_lines

def create_route_dict(file_lines):
    result = {}
    for line in file_lines:
        line = line.split(' ') # clean the trailing newline and make an array

        key = line[0][:-1]
        result[key] = {}
        node_entries = line[1:]
        for entry in node_entries:
            entry = entry.split(',')
            next_node = entry[0]
            next_node_distance = entry[1]
            result[key][next_node] = next_node_distance

    return result

def bfs(ss_path):
    ss_file_lines = load_file_lines(ss_path)
    start_node = ss_file_lines.pop(0) # returns the start node
    end_nodes = ss_file_lines.pop(0).split(' ') # returns the end node
    end_node = "" # this describes a node from end_nodes which was last hit
    ss_dict = create_route_dict(ss_file_lines)

    queue = Queue()
    enqueued = set()
    queue.put(start_node)

    visited = set()

    found_solution = False
    found_by_dict = {} # a dict which contains a k, v pair which linka a found node with the previous node which has found it

    while queue:
        #print('#'*10 + ' Queue: ' + str(list(queue.queue)))
        #print(' Visited: ' + str(visited))
        node = queue.get(0)
        if node in visited:
            continue
        visited.add(node)
        if node in end_nodes:
            found_solution = True
            end_node = node
            break

        #Get child nodes
        child_nodes = dict(ss_dict[node]) #this must be cast or it will override the ss_dict and mess stuff up
        while (len(child_nodes) != 0):

            closest_child_nodes = sorted(child_nodes)

            for closest_node in closest_child_nodes:
                if len(child_nodes) == 0: break
                #print(closest_node)
                child_nodes.pop(closest_node)

                if closest_node not in visited:
                    next_node = closest_node
                    if next_node not in enqueued:
                        found_by_dict[closest_node] = node
                        queue.put(next_node)
                        enqueued.add(next_node)

    #Trace a path back
    path = []
    cost = 0.0
    while True:
        if end_node == start_node:
            path.append(end_node)
            break
        layer_n = end_node
        layer_n_minus_1 = found_by_dict[layer_n]
        cost = cost + int(ss_dict[layer_n_minus_1][layer_n])
        path.append(layer_n)
        end_node = layer_n_minus_1
    path.reverse()

    print_result('BFS', found_solution, len(visited), cost, path)

def ucs(ss_path):
    ss_file_lines = load_file_lines(ss_path)

    start_node = ss_file_lines.pop(0) # returns the start node
    end_nodes = ss_file_lines.pop(0).split(' ') # returns the end node
    end_node = "" # this describes a node from end_nodes which was last hit

    ss_dict = create_route_dict(ss_file_lines)

    queue = []
    start_node_list = []
    start_node_list.append(start_node) # [node name, length from start]
    start_node_list.append(0)
    queue.append(start_node_list)
    #print(queue)

    visited = []

    found_solution = False
    found_by_dict = {} # a dict which contains a k, v pair which links a found node with the previous node which has found it

    while queue:
        #print('#'*10 + ' Queue: ' + str(queue))
        #print(' Visited: ' + str(visited))
        
        #find lowest distance node
        min_node = queue[0]
        for node in queue:
            if (node[1] < min_node[1]) or (node[1] == min_node[1] and node[0] < min_node[0]):
                min_node = node
                min_dist = node[1]
    
        queue.pop(queue.index(min_node))
        node = min_node # just for clarity

        visited.append(node[0])
        if node[0] in end_nodes:
            found_solution = True
            end_node = node[0]
            break

        #Get child nodes
        child_nodes = dict(ss_dict[node[0]]) #this must be cast or it will override the ss_dict and mess stuff up
        #print(child_nodes)

        for child_node in child_nodes:
            if child_node in visited: # if visited
                continue
            elif any(child_node in sublist for sublist in queue): # if its already in queue check length
                for i in range(len(queue)):
                    new_dist = int(child_nodes[child_node]) + node[1]
                    if child_node == queue[i][0] and new_dist < queue[i][1]:
                        queue[i][1] = new_dist
                        found_by_dict[queue[i][0]] = node[0]
            else:
                child_node_list = []
                child_node_list.append(child_node)
                found_by_dict[child_node] = node[0]
                distance = node[1] + int(child_nodes[child_node])
                child_node_list.append(distance)
                queue.append(child_node_list)

    #Trace a path back
    path = []
    cost = 0.0
    while True:
        if end_node == start_node:
            path.append(end_node)
            break
        layer_n = end_node
        layer_n_minus_1 = found_by_dict[layer_n]
        cost = cost + int(ss_dict[layer_n_minus_1][layer_n])
        path.append(layer_n)
        end_node = layer_n_minus_1
    path.reverse()

    print_result('UCS', found_solution, len(visited), cost, path)

def astar():
    a=0

def main():
    args = configure_parser_and_get_args()

    if (args.alg == 'bfs'):
        bfs(args.ss)
    elif (args.alg == 'ucs'):
        ucs(args.ss)
    elif (args.alg == 'astar'):
        astar()

if __name__ == '__main__':
    main()

